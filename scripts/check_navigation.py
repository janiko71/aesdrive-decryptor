#!/usr/bin/env python3
"""Script de v√©rification des liens de navigation dans la documentation."""

import os
import re
from pathlib import Path


def check_file_exists(filepath):
    """V√©rifier si un fichier existe."""
    return Path(filepath).exists()


def extract_markdown_links(content):
    """Extraire tous les liens Markdown d'un contenu."""
    # Pattern pour les liens Markdown [texte](lien)
    pattern = r'\[([^\]]+)\]\(([^)]+)\)'
    return re.findall(pattern, content)


def check_navigation_in_file(filepath):
    """V√©rifier la navigation dans un fichier sp√©cifique."""
    print(f"\nüîç V√©rification de {filepath}")
    
    if not check_file_exists(filepath):
        print(f"‚ùå Fichier {filepath} introuvable")
        return False
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier la pr√©sence de la barre de navigation
    has_navigation = "üìñ **Navigation :**" in content
    if has_navigation:
        print("‚úÖ Barre de navigation pr√©sente")
    else:
        print("‚ö†Ô∏è Barre de navigation manquante")
    
    # Extraire et v√©rifier les liens
    links = extract_markdown_links(content)
    broken_links = []
    
    for text, link in links:
        # Ignorer les liens externes (http/https)
        if link.startswith(('http://', 'https://')):
            continue
            
        # Ignorer les ancres (#)
        if link.startswith('#'):
            continue
            
        # V√©rifier si le fichier li√© existe
        if not check_file_exists(link):
            broken_links.append((text, link))
    
    if broken_links:
        print(f"‚ùå {len(broken_links)} lien(s) cass√©(s):")
        for text, link in broken_links:
            print(f"   ‚Ä¢ [{text}]({link})")
        return False
    else:
        print(f"‚úÖ Tous les {len([l for l in links if not l[1].startswith(('http', '#'))])} liens internes fonctionnent")
        return True


def main():
    """Fonction principale."""
    print("üîó V√©rification de la Navigation de la Documentation")
    print("=" * 60)
    
    # Fichiers √† v√©rifier
    files_to_check = [
        'README.md',
        'docs/USAGE.md', 
        'docs/SECURITY.md',
        'TOC.md'
    ]
    
    all_good = True
    
    for filepath in files_to_check:
        if not check_navigation_in_file(filepath):
            all_good = False
    
    print("\n" + "=" * 60)
    
    if all_good:
        print("üéâ Toute la navigation fonctionne correctement!")
        print("\nüìã R√©sum√© de la navigation:")
        print("   ‚Ä¢ README.md - Point d'entr√©e avec navigation compl√®te")
        print("   ‚Ä¢ docs/USAGE.md - Guide avec liens contextuels")
        print("   ‚Ä¢ docs/SECURITY.md - S√©curit√© avec liens vers autres docs")
        print("   ‚Ä¢ TOC.md - Table des mati√®res technique")
        return 0
    else:
        print("‚ö†Ô∏è Probl√®mes de navigation d√©tect√©s!")
        print("V√©rifiez les liens cass√©s ci-dessus.")
        return 1


if __name__ == "__main__":
    exit(main())